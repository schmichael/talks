Metafora Distributed Work System
With Go and etcd
13 Jan 2015
Tags: etcd, metafora, distributed

Michael Schurter
Data Engineer, Lytics
schmichael@lytics.io
https://lytics.github.io/
@schmichael

* About

- schmichael on [[https://twitter.com/schmichael][Twitter]], [[https://github.com/schmichael][Github]], Freenode
- Using Go personally since [[https://golang.org/doc/devel/release.html#r60][r60 (2011)]] and professionally at [[http://getlytics.com][Lytics]] since 2013.
- Python developer before that. Professional Java avoider.

.image 2015-metafora/lytics-wide.jpg _ 930

* Lytics

Lytics builds user profiles for our customers.

- Import from customers
- Merge (Entity Resolution)
- Enrich
- Export to customers

* Distributed work at Lytics

- Imports are continuous/streaming _or_ one time
- Merging is continuous
- Enriching is continuous _or_ one time
- Exporting is continuous _or_ one time

*Lots*of*work*that*may*run*for*minutes,*hours,*days,*or*forever!*

*Work*must*run* _exactly_ *once.*

* Existing Solutions

- [[http://www.goworker.org/][goworker]] - Optimized for low latency high throughput work. Considers 1s a "high latency job" and has no work state.
- [[https://github.com/boundary/ordasity][Ordasity]] - JVM only, sorry.
- [[https://github.com/dforsyth/donut][Donut]] - Go version of Ordasity, unfinished.
- Cluster management like [[https://mesos.apache.org/][Mesos]] or [[http://kubernetes.io/][Kubernetes]] - Very high operational cost. Optimized for 1 process per "work".

.image 2015-metafora/kube-graph.svg 220 _

* Metafora

Start simple. Add only what's needed. Distributed systems are inherently difficult, so don't overcomplicate.

- A *library* for applications to use (not an app or framework)
- No *master* - Metafora consumers cooperatively steal work
- Fault Tolerant - No SPOF, work is reassigned if a consumer crashes
- Partition Tolerant - Worker shuts down if unable to communicate with quorum
- Simple - Few states, no checkpointing, no work configuration
- Extensible - well defined interfaces for coordinators and balancers
- Testable - comes with an embedded coordinator for easy tests

* Components

.image 2015-metafora/metafora-dia.svg 500 _

* Components: etcd

Highly-available, consistent, key/value store.

ZooKeeper replacement. HTTP API. Simple configuration.

Used as a distributed lock for tasks and queue for commands.

.image 2015-metafora/etcd.png

Purely optional though!

* Components: Coordinator

.code 2015-metafora/coordinator.go.snippet

Task loop: `Watch` → `Claim` → `Release/Done` ↺

Implemented in [[https://godoc.org/github.com/lytics/metafora/m_etcd][m_etcd]].

* Components: Balancer

.code 2015-metafora/balancer.go.snippet

Task loop: `C.Watch` → `B.CanClaim` → `C.Claim` → `C.Release/Done` ↺

`Balance()` called perdiocally right now (see [[https://github.com/lytics/metafora/issues/88][lytics/metafora#88]]).

* Components: Handler

.code 2015-metafora/handler.go.snippet

`C.Watch` → `B.CanClaim` → `C.Claim` → `H.Run` ... `H.Stop` → `C.Release/Done` ↺

* Example!

.play 2015-metafora/example.go /START OMIT/,/END OMIT/

* More Goodies: Builtin Balancers

- [[https://godoc.org/github.com/lytics/metafora#DumbBalancer][Dumb Balancer]] - accept everything!
- [[https://godoc.org/github.com/lytics/metafora#SleepBalancer][Sleepy Balancer]] - Delay claims by number of tasks already claimed
- [[https://godoc.org/github.com/lytics/metafora#FairBalancer][Fair Balancer]] - nodes release tasks when they have >120% the cluster average number of tasks. Has a [[https://godoc.org/github.com/lytics/metafora/m_etcd#NewFairBalancer][coordinator specific component]].

* Even more: HTTP Introspection Handler

.code 2015-metafora/httputil.go.snippet

Combine with [[http://golang.org/pkg/net/http/pprof/][net/http/pprof]] for easy debugging.

Help wanted: [[https://github.com/lytics/metafora/issues/27][metrics]].

* Does it work?

Lytics is running 4 VMs in production.

Ran parallel with old system until a couple weeks ago and shut the old system down.

.code 2015-metafora/prod-metafora.log

* Next Steps

- *Task*state*machine* (library or builtin?!)
- *Task*configuration*management* (library or builtin?!)
- Alternative coordinator implementation (Help wanted!)
- [[https://github.com/lytics/metafora/tree/master/Documentation][Docs]], logo, examples (see [[https://github.com/lytics/metafora/tree/master/examples][Koalemos]]), etc.
- Lots left to do: https://github.com/lytics/metafora/issues

* Interesting bits

- [[https://github.com/lytics/metafora/blob/master/metafora.go][metafora.go]] - The main consumer (~500 lines)
- Using [[https://github.com/lytics/metafora/blob/master/metafora.go#L80-L88][the consumer and anonymous types]] to implement [[https://github.com/lytics/metafora/blob/master/balancer.go#L14-L23][Balancer]] and [[https://github.com/lytics/metafora/blob/master/coordinator.go#L3-L13][Coordinator]] `Contexts`.
- [[https://github.com/lytics/metafora/blob/master/m_etcd/coordinator.go#L437-L488][etcd watching]] - Sadly trickier than I had hoped!
- `koalemosd` [[https://github.com/lytics/metafora/blob/master/examples/koalemosd/main.go][main.go]] and [[https://github.com/lytics/metafora/blob/master/examples/koalemosd/handler.go][handler.go]] - A more involved handler implementation.
- [[https://github.com/lytics/metafora/blob/master/m_etcd/taskmgr.go][taskmgr.go]] - Maintains work claims in etcd
