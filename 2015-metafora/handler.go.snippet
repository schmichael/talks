// Handler is the task handling interface. The Consumer will create a new
// Handler for each claimed task, call Run once and only once, and call Stop
// when the task should persist its progress and exit.
type Handler interface {
	// Run handles a task and blocks until completion or Stop is called.
	//
	// If Run returns true, Metafora will mark the task as Done via the
	// Coordinator. The task will not be rescheduled.
	//
	// If Run returns false, Metafora will Release the task via the Coordinator.
	// The task will be scheduled to run again.
	Run(taskID string) (done bool) // HL

	// Stop signals to the handler to shutdown gracefully. Stop implementations
	// should not block until Run exits.
	Stop() // HL
}

// HandlerFunc is called by the Consumer to create a new Handler for each task.
type HandlerFunc func() Handler
